import { approveTraderOrder } from "../api/orders"
import { useAuth } from "../contexts/AuthContext"
import React, { useState, useEffect, useCallback } from "react"
import api from "../api/axios"
import { CopyableId } from "./CopyableID"
import './ActiveOrdersTable.css'

const Requisite = ({bank_name, payment_system, card_number, phone, owner}) => {
  return (
    <div className="requisite-card">
      <div className="requisite-item">
        <span className="requisite-icon">üí≥</span>
        <span className="requisite-label">–°–∏—Å—Ç–µ–º–∞:</span>
        <span className="requisite-value">{payment_system}</span>
      </div>
      
      <div className="requisite-item">
        <span className="requisite-icon">üè¶</span>
        <span className="requisite-label">–ë–∞–Ω–∫:</span>
        <span className="requisite-value">{bank_name}</span>
      </div>
      
      {card_number && (
        <div className="requisite-item">
          <span className="requisite-icon">üî¢</span>
          <span className="requisite-label">–ö–∞—Ä—Ç–∞:</span>
          <span className="requisite-value">{formatCardNumber(card_number)}</span>
        </div>
      )}
      
      {phone && (
        <div className="requisite-item">
          <span className="requisite-icon">üì±</span>
          <span className="requisite-label">–¢–µ–ª–µ—Ñ–æ–Ω:</span>
          <span className="requisite-value">{formatPhoneNumber(phone)}</span>
        </div>
      )}
      
      <div className="requisite-item">
        <span className="requisite-icon">üë§</span>
        <span className="requisite-label">–í–ª–∞–¥–µ–ª–µ—Ü:</span>
        <span className="requisite-value">{owner}</span>
      </div>
    </div>
  );
};

const formatCardNumber = (number) => {
  return number.replace(/(\d{4})/g, '$1 ').trim();
};

const formatPhoneNumber = (phone) => {
  const match = phone.match(/^\+7(\d{3})(\d{3})(\d{2})(\d{2})$/);
  if (!match) return phone;
  return `+7 (${match[1]}) ${match[2]}-${match[3]}-${match[4]}`;
};

const TimeLeft = ({ expiresAt }) => {
  const [timeLeft, setTimeLeft] = useState("");
  
  useEffect(() => {
    const calculateTimeLeft = () => {
      const now = new Date();
      const expires = new Date(expiresAt);
      const diff = expires - now;
    
      if (diff <= 0) return "–ò—Å—Ç–µ–∫–ª–æ";
    
      const seconds = Math.floor((diff / 1000) % 60);
      const minutes = Math.floor((diff / (1000 * 60)) % 60);
      const hours = Math.floor(diff / (1000 * 60 * 60));
    
      return `${hours > 0 ? `${hours}—á ` : ""}${minutes}–º ${seconds}—Å`;
    };

    setTimeLeft(calculateTimeLeft());
    
    const timerId = setInterval(() => {
      setTimeLeft(calculateTimeLeft());
    }, 1000);

    return () => clearInterval(timerId);
  }, [expiresAt]);

  return <span>{timeLeft}</span>;
};

const TraderReward = ({ amount_crypto, trader_reward }) => {
  const rewardAmount = amount_crypto * trader_reward;
  const rewardPercent = trader_reward * 100;
  
  return (
    <div className="trader-reward-balanced">
      <div className="reward-percent">
        <div className="percent-value">{rewardPercent.toFixed(1)}%</div>
        <div className="percent-label">–≤–∞—à–∞ –¥–æ–ª—è</div>
      </div>
      
      <div className="reward-separator">‚Üí</div>
      
      <div className="reward-amount">
        <div className="amount-value">{rewardAmount.toFixed(2)}</div>
        <div className="amount-label">USDT</div>
      </div>
    </div>
  );
};

const ApproveOrderModal = ({isOpen, onClose, onApprove, isApproving}) => {
    if (!isOpen) return null

    return (
    <div className="modal-overlay">
        <div className="approve-modal">
            <h1>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–¥–µ–ª–∫—É?</h1>
            <div className="modal-actions">
                <button 
                  onClick={onApprove} 
                  disabled={isApproving}
                  className="approve-modal-btn"
                >
                  {isApproving ? '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ...' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'}
                </button>
                <button 
                  onClick={onClose} 
                  disabled={isApproving}
                  className="cancel-modal-btn"
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
            </div>
        </div>
    </div>
    )
}

const DealAmount = ({ amount_fiat, amount_crypto, crypto_rub_rate, currency }) => {
  return (
    <div className="deal-amount">
      <div className="fiat-amount">
        <span className="icon">üíµ</span>
        {amount_fiat} <span className="currency">{currency}</span>
      </div>
      <div className="crypto-amount">
        <span className="icon"></span>
        ‚âà {amount_crypto} USDT
      </div>
      <div className="exchange-rate">
        <span className="icon">üîÅ</span>
        1 USDT = {crypto_rub_rate} {currency}
      </div>
    </div>
  );
};

const ActiveOrdersTable = ({isOpen}) => {
    const [activeOrders, setActiveOrders] = useState([])
    const {traderID} = useAuth()
    const [loading, setLoading] = useState(false)
    const [error, setError] = useState(null)
    const [isApproveModalOpen, setIsApproveModalOpen] = useState(false)
    const [orderID, setOrderID] = useState('')
    const [isApproving, setIsApproving] = useState(false)
    
    const [pagination, setPagination] = useState({
        page: 1,
        limit: 5,
        total: 0,
    })

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤
    const fetchOrders = useCallback(async () => {
        try {
            setLoading(true)
            setError(null)
            
            const params = {
                page: pagination.page,
                limit: pagination.limit,
                status: "PENDING"
            }

            const response = await api.get(`/orders/trader/${traderID}`, {params})
            
            setActiveOrders(response.data.orders)
            setPagination(prev => ({
                ...prev,
                total: response.data.pagination.total_items
            }))
        } catch(err) {
            setError(err.response?.data?.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤")
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:", err)
        } finally {
            setLoading(false)
        }
    }, [traderID, pagination.page, pagination.limit])

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    useEffect(() => {
        if (isOpen) {
            fetchOrders()
        }
    }, [isOpen, pagination.page, pagination.limit, fetchOrders])

    const handlePageChange = (newPage) => {
        if (newPage >= 1 && newPage <= Math.ceil(pagination.total / pagination.limit)) {
            setPagination(prev => ({...prev, page: newPage}))
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
    const handleApprove = async () => {
        if (!orderID) return;
        
        setIsApproving(true)
        try {
            await approveTraderOrder({ order_id: orderID })
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
            setIsApproveModalOpen(false)
            fetchOrders()
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:", error)
            setError(error.response?.data?.message || "–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏")
        } finally {
            setIsApproving(false)
        }
    }

    if (!isOpen) return null

    const totalPages = Math.max(Math.ceil(pagination.total / pagination.limit), 1)

    return (
        <div className="orders-container">
            <ApproveOrderModal
                isOpen={isApproveModalOpen}
                onClose={() => setIsApproveModalOpen(false)}
                onApprove={handleApprove}
                isApproving={isApproving}
            />
            
            {loading && <div className="loading-indicator">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...</div>}
            {error && <div className="error-message">{error}</div>}
            
            {!loading && activeOrders.length === 0 && (
                <div className="no-orders-message">
                    –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                </div>
            )}
            
            {activeOrders.length > 0 && (
                <>
                    <table className="orders-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>–†–µ–∫–≤–∏–∑–∏—Ç</th>
                                <th>–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏</th>
                                <th>–ù–∞–≥—Ä–∞–¥–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞</th>
                                <th>–¢–∞–π–º–µ—Ä</th>
                                <th>–°—Ç–∞—Ç—É—Å</th>
                                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                            </tr>
                        </thead>
                        <tbody>
                            {activeOrders.map(order => (
                              <tr key={order.order_id}>
                                <td data-label="ID">
                                  <CopyableId id={order.order_id} />
                                </td>
                                <td data-label="–†–µ–∫–≤–∏–∑–∏—Ç">
                                  <Requisite {...order.bank_detail} />
                                </td>
                                <td data-label="–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏">
                                  <DealAmount 
                                    amount_fiat={order.amount_fiat}
                                    amount_crypto={order.amount_crypto}
                                    crypto_rub_rate={order.crypto_rub_rate}
                                    currency={order.bank_detail.currency}
                                  />
                                </td>
                                <td data-label="–ù–∞–≥—Ä–∞–¥–∞">
                                  <TraderReward 
                                    amount_crypto={order.amount_crypto} 
                                    trader_reward={order.trader_reward} 
                                  />
                                </td>
                                <td data-label="–¢–∞–π–º–µ—Ä">
                                   <TimeLeft expiresAt={order.expires_at} />
                                </td>
                                <td data-label="–°—Ç–∞—Ç—É—Å">
                                  <span className={`status-badge ${order.status.toLowerCase()}`}>
                                    {order.status}
                                  </span>
                                </td>
                                <td data-label="–î–µ–π—Å—Ç–≤–∏—è">
                                  <button 
                                    className="approve-button"
                                    onClick={() => {
                                      setIsApproveModalOpen(true);
                                      setOrderID(order.order_id);
                                    }}
                                  >
                                    –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                                  </button>
                                </td>
                              </tr>
                            ))}
                        </tbody>
                    </table>
                    
                    <div className="pagination">
                        <button
                          onClick={() => handlePageChange(pagination.page - 1)}
                          disabled={pagination.page === 1}
                          className="pagination-button"
                        >
                          &larr; –ù–∞–∑–∞–¥
                        </button>

                        <span className="page-info">
                          –°—Ç—Ä–∞–Ω–∏—Ü–∞ {pagination.page} –∏–∑ {totalPages}
                        </span>

                        <button
                          onClick={() => handlePageChange(pagination.page + 1)}
                          disabled={pagination.page >= totalPages}
                          className="pagination-button"
                        >
                          –í–ø–µ—Ä–µ–¥ &rarr;
                        </button>

                        <select
                          value={pagination.limit}
                          onChange={(e) => setPagination({
                            page: 1,
                            limit: Number(e.target.value),
                            total: pagination.total
                          })}
                          className="page-select"
                        >
                          <option value="5">5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ</option> 
                          <option value="10">10 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ</option>
                          <option value="20">20 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ</option>
                          <option value="50">50 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ</option>
                        </select>
                    </div>
                </>
            )}
        </div>
    )
}

export default ActiveOrdersTable