import { useState, useEffect } from "react"
import { useTraderBankDetails } from "../hooks/useTraderBankDetails"
import EditbankDetailsModal from "./EditBankDetailsModal"
import { toast } from "react-toastify"
import { deleteBankDetail } from "../api/banking"
import { getBankDetailsStats } from "../api/stats" // —Å–æ–∑–¥–∞–¥–∏–º —ç—Ç–æ—Ç –º–µ—Ç–æ–¥
import RequisiteStats from "./RequisiteStats"
import { useAuth } from "../contexts/AuthContext"
import './BankDetailsTable.css'

const Requisite = ({bank_name, payment_system, card_number, phone, owner}) => {
  return (
    <div className="requisite-card">
      <div className="requisite-item">
        <span className="requisite-icon">üí≥</span>
        <span className="requisite-label">–°–∏—Å—Ç–µ–º–∞:</span>
        <span className="requisite-value">{payment_system}</span>
      </div>
      
      <div className="requisite-item">
        <span className="requisite-icon">üè¶</span>
        <span className="requisite-label">–ë–∞–Ω–∫:</span>
        <span className="requisite-value">{bank_name}</span>
      </div>
      
      {card_number && (
        <div className="requisite-item">
          <span className="requisite-icon">üî¢</span>
          <span className="requisite-label">–ö–∞—Ä—Ç–∞:</span>
          <span className="requisite-value">{formatCardNumber(card_number)}</span>
        </div>
      )}
      
      {phone && (
        <div className="requisite-item">
          <span className="requisite-icon">üì±</span>
          <span className="requisite-label">–¢–µ–ª–µ—Ñ–æ–Ω:</span>
          <span className="requisite-value">{formatPhoneNumber(phone)}</span>
        </div>
      )}
      
      <div className="requisite-item">
        <span className="requisite-icon">üë§</span>
        <span className="requisite-label">–í–ª–∞–¥–µ–ª–µ—Ü:</span>
        <span className="requisite-value">{owner}</span>
      </div>
    </div>
  );
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
const formatCardNumber = (number) => {
  return number.replace(/(\d{4})/g, '$1 ').trim();
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
const formatPhoneNumber = (phone) => {
  const match = phone.match(/^\+7(\d{3})(\d{3})(\d{2})(\d{2})$/);
  if (!match) return phone;
  return `+7 (${match[1]}) ${match[2]}-${match[3]}-${match[4]}`;
};

const SumLimits = ({min_amount, max_amount, currency}) => {
    return (
        <div>
            <p>–û—Ç {min_amount} {currency}</p>
            <p>–î–æ {max_amount} {currency}</p>
        </div>
    )
} 

const VolumeLimits = ({max_amount_day, max_amount_month, currency}) => {
    return (
        <div>
            <p>–í –¥–µ–Ω—å: {max_amount_day} {currency}</p>
            <p>–í –º–µ—Å—è—Ü: {max_amount_month} {currency}</p>
        </div>
    )
}

const QuantityLimits = ({max_quantity_day, max_quantity_month}) => {
    return (
        <div>
            <p>–ú–∞–∫—Å –≤ –¥–µ–Ω—å: {max_quantity_day}</p>
            <p>–ú–∞–∫—Å –≤ –º–µ—Å—è—Ü: {max_quantity_month}</p>
        </div>
    )
}

const ConfirmDeleteModal = ({ isOpen, onClose, onConfirm, bankName }) => {
  if (!isOpen) return null;
  
  return (
    <div className="modal-overlay">
      <div className="confirm-delete-modal">
        <div className="modal-header">
          <h3>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</h3>
        </div>
        <div className="modal-body">
          <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç –±–∞–Ω–∫–∞ <strong>{bankName}</strong>?</p>
          <p>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.</p>
        </div>
        <div className="modal-footer">
          <button className="cancel-btn" onClick={onClose}>–û—Ç–º–µ–Ω–∞</button>
          <button className="confirm-btn" onClick={onConfirm}>–£–¥–∞–ª–∏—Ç—å</button>
        </div>
      </div>
    </div>
  );
};

const CombinedLimits = ({
  min_amount,
  max_amount,
  currency,
  max_amount_day,
  max_amount_month,
  max_quantity_day,
  max_quantity_month,
  max_orders_simultaneosly
}) => {
  return (
    <div className="combined-limits-card">
      <div className="limits-section">
        <div className="section-header">
          <span className="icon">üí∏</span>
          <span className="title">–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏</span>
        </div>
        <div className="limits-row">
          <span className="label">–û—Ç:</span>
          <span className="value">{min_amount} {currency}</span>
        </div>
        <div className="limits-row">
          <span className="label">–î–æ:</span>
          <span className="value">{max_amount} {currency}</span>
        </div>
      </div>
      
      <div className="limits-section">
        <div className="section-header">
          <span className="icon">üìä</span>
          <span className="title">–û–±—ä—ë–º</span>
        </div>
        <div className="limits-row">
          <span className="label">–î–µ–Ω—å:</span>
          <span className="value">{max_amount_day} {currency}</span>
        </div>
        <div className="limits-row">
          <span className="label">–ú–µ—Å—è—Ü:</span>
          <span className="value">{max_amount_month} {currency}</span>
        </div>
      </div>
      
      <div className="limits-section">
        <div className="section-header">
          <span className="icon">üî¢</span>
          <span className="title">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</span>
        </div>
        <div className="limits-row">
          <span className="label">–î–µ–Ω—å:</span>
          <span className="value">{max_quantity_day}</span>
        </div>
        <div className="limits-row">
          <span className="label">–ú–µ—Å—è—Ü:</span>
          <span className="value">{max_quantity_month}</span>
        </div>
      </div>
      
      <div className="limits-section simultaneous">
        <div className="section-header">
          <span className="icon">üîÑ</span>
          <span className="title">–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ</span>
        </div>
        <div className="limits-row">
          <span className="value-big">{max_orders_simultaneosly}</span>
        </div>
      </div>
    </div>
  );
};

const StatusBadge = ({ enabled }) => {
  return (
    <div className={`status-badge ${enabled ? 'active' : 'inactive'}`}>
      {enabled ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"}
    </div>
  );
};

const BankDetailsTable = () => {
  const { bankDetails } = useTraderBankDetails()
  const [showModal, setShowModal] = useState(false)
  const [chosenDetail, setChoseonDetail] = useState(null)
  const [stats, setStats] = useState([])
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [detailToDelete, setDetailToDelete] = useState(null);

  const {traderID} = useAuth() // –∏–ª–∏ –ø–æ–ª—É—á–∏ –æ—Ç–∫—É–¥–∞ —É —Ç–µ–±—è id

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const res = await getBankDetailsStats(traderID)
        setStats(res.data.stats)
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤", err)
      }
    }
    fetchStats()
  }, [traderID])

  const handleEdit = (detail) => {
    setChoseonDetail(detail)
    setShowModal(true)
  }

  const handleDeleteClick = (detail) => {
    setDetailToDelete(detail);
    setShowDeleteModal(true);
  };

  const confirmDelete = async () => {
    if (!detailToDelete) return;
    
    try {
      await deleteBankDetail({ bankDetailID: detailToDelete.id });
      toast.success("–†–µ–∫–≤–∏–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω");
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      window.location.reload(); // –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    } catch (error) {
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞");
      console.error("Delete error:", error);
    } finally {
      setShowDeleteModal(false);
      setDetailToDelete(null);
    }
  };

  const cancelDelete = () => {
    setShowDeleteModal(false);
    setDetailToDelete(null);
  }; 

  return (
    <>
      <div className="bank-details-table-container">
        <EditbankDetailsModal
          isOpen={showModal}
          onClose={() => setShowModal(false)}
          onSuccess={() => {
            toast.success("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            setShowModal(false)
          }}
          detail={chosenDetail}
        />

      <ConfirmDeleteModal
          isOpen={showDeleteModal}
          onClose={cancelDelete}
          onConfirm={confirmDelete}
          bankName={detailToDelete?.bank_name || ""}
      />
        <table>
          <thead>
            <tr>
              <th>–†–µ–∫–≤–∏–∑–∏—Ç—ã</th>
              <th>–í–∞–ª—é—Ç–∞</th>
              <th>–õ–∏–º–∏—Ç—ã</th>
              <th>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</th>
              <th>–°—Ç–∞—Ç—É—Å</th>
              <th></th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            {bankDetails.map((detail) => {
              const stat = stats.find((s) => s.bank_detail_id === detail.id)
              return (
                <tr key={detail.id}>
                  <td><Requisite {...detail} /></td>
                  <td>{detail.currency}</td>
                  <td>
                  <CombinedLimits 
                    min_amount={detail.min_amount}
                    max_amount={detail.max_amount}
                    currency={detail.currency}
                    max_amount_day={detail.max_amount_day}
                    max_amount_month={detail.max_amount_month}
                    max_quantity_day={detail.max_quantity_day}
                    max_quantity_month={detail.max_quantity_month}
                    max_orders_simultaneosly={detail.max_orders_simultaneosly}
                  />
                  </td>
                  <td data-label="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞">
                    <RequisiteStats stat={stat} detail={detail} />
                  </td>
                  <td data-label="–°—Ç–∞—Ç—É—Å">
                    <StatusBadge enabled={detail.enabled} />
                  </td>
                  <td data-label=""><button onClick={() => handleEdit(detail)}>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button></td>
                  <td data-label=""><button className="delete-btn" onClick={() => handleDeleteClick(detail)}>–£–¥–∞–ª–∏—Ç—å</button></td>
                </tr>
              )
            })}
          </tbody>
        </table>
      </div>
    </>
  )
}

export default BankDetailsTable